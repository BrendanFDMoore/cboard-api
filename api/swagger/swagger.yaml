swagger: "2.0"
info:
  description: "CBoard API provides backend functionality and persistence to the CBoard application"
  version: "0.0.1"
  title: CBoard API
  termsOfService: "http://cboard.io"
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
parameters:
  User:
    name: user
    in: body
    description: User data for creating a new local user 
    required: true
    schema:
      type: object
      required:
      - name
      - email
      - username
      - password
      properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        locale:
          type: string
          enum: ["da", "nl", "en", "fi", "fr", "de", "hu", "it", "nb", "pt", "ro", "ru", "es", "sv", "tr", "ara", "prs", "pes", "urd", "zhs", "zht", "none"]

paths:
  /swagger:
    x-swagger-pipe: swagger_raw
    
  /user:
    x-swagger-router-controller: user
    post:
      operationId: createUser
      description: Create a new user
      parameters:
        - $ref: '#/parameters/User'
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      operationId: listUser
      description: Return users list
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/{id}:
    x-swagger-router-controller: user
    get:
      description: get a specific user
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update a user
      # define the parameters
      parameters:
        - name: id
          description: User id
          type: string
          in: path
          required: true
        - name: info
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: delete a user
      parameters:
        - name: id
          description: User id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/activate/{url}:
    x-swagger-router-controller: user
    post:
      operationId: activateUser
      description: Create a new user
      # define the type of response for Success "200" and Error
      parameters:
        - in: path
          name: url
          description: Random generated key for user activation
          required: true
          type: string
          minimum: 1
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
# complex objects have schema definitions
definitions:
  User:
    type: object
    properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        locale:
          type: string
          enum: ["da", "nl", "en", "fi", "fr", "de", "hu", "it", "nb", "pt", "ro", "ru", "es", "sv", "tr", "ara", "prs", "pes", "urd", "zhs", "zht", "none"]
    required:
        - name
        - email
        - username
        - locale
  GeneralResponse:
    type: object
    properties:
      success:
        type: number
        description: returns 1 if successful
      message:
        type: string
        description: a short comment
    required:
      - success
      - message
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  GetUserListResponse:
    required:
      - keywords
    properties:
      keywords:
        type: object
        properties:
            name:
              type: string
            email:
              type: string
            username:
              type: string
            password:
              type: string
  GetUserResponse:
    required:
        - name
        - email
        - username
        - locale
    properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        locale:
          type: string
              